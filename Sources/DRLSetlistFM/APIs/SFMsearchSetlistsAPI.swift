//
// SFMsearchsetlistsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SFMsearchSetlistsAPI {
    /**
     Search for setlists.

     - parameter artistMbid: (query) the artist&#x27;s Musicbrainz Identifier (mbid) (optional)
     - parameter artistName: (query) the artist&#x27;s name (optional)
     - parameter artistTmid: (query) the artist&#x27;s Ticketmaster Identifier (tmid) (optional)
     - parameter cityId: (query) the city&#x27;s geoId (optional)
     - parameter cityName: (query) the name of the city (optional)
     - parameter countryCode: (query) the country code (optional)
     - parameter date: (query) the date of the event (format dd-MM-yyyy) (optional)
     - parameter lastFm: (query) the event&#x27;s Last.fm Event ID (deprecated) (optional)
     - parameter lastUpdated: (query) the date and time (UTC) when this setlist was last updated (format yyyyMMddHHmmss) - either edited or reverted. search will return setlists that were updated on or after this date (optional)
     - parameter p: (query) the number of the result page (optional)
     - parameter state: (query) the state (optional)
     - parameter stateCode: (query) the state code (optional)
     - parameter tourName: (query)  (optional)
     - parameter venueId: (query) the venue id (optional)
     - parameter venueName: (query) the name of the venue (optional)
     - parameter year: (query) the year of the event (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sfmSearchSetlistsGetSetlists(artistMbid: String? = nil, artistName: String? = nil, artistTmid: Int? = nil, cityId: String? = nil, cityName: String? = nil, countryCode: String? = nil, date: String? = nil, lastFm: Int? = nil, lastUpdated: String? = nil, p: Int? = nil, state: String? = nil, stateCode: String? = nil, tourName: String? = nil, venueId: String? = nil, venueName: String? = nil, year: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sfmSearchSetlistsGetSetlistsWithRequestBuilder(artistMbid: artistMbid, artistName: artistName, artistTmid: artistTmid, cityId: cityId, cityName: cityName, countryCode: countryCode, date: date, lastFm: lastFm, lastUpdated: lastUpdated, p: p, state: state, stateCode: stateCode, tourName: tourName, venueId: venueId, venueName: venueName, year: year).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Search for setlists.
     - GET /1.0/search/setlists

     - API Key:
       - type: apiKey X-API-KEY 
       - name: ApiKeyAuth
     - examples: [{contentType=application/json, example=""}]
     - parameter artistMbid: (query) the artist&#x27;s Musicbrainz Identifier (mbid) (optional)
     - parameter artistName: (query) the artist&#x27;s name (optional)
     - parameter artistTmid: (query) the artist&#x27;s Ticketmaster Identifier (tmid) (optional)
     - parameter cityId: (query) the city&#x27;s geoId (optional)
     - parameter cityName: (query) the name of the city (optional)
     - parameter countryCode: (query) the country code (optional)
     - parameter date: (query) the date of the event (format dd-MM-yyyy) (optional)
     - parameter lastFm: (query) the event&#x27;s Last.fm Event ID (deprecated) (optional)
     - parameter lastUpdated: (query) the date and time (UTC) when this setlist was last updated (format yyyyMMddHHmmss) - either edited or reverted. search will return setlists that were updated on or after this date (optional)
     - parameter p: (query) the number of the result page (optional)
     - parameter state: (query) the state (optional)
     - parameter stateCode: (query) the state code (optional)
     - parameter tourName: (query)  (optional)
     - parameter venueId: (query) the venue id (optional)
     - parameter venueName: (query) the name of the venue (optional)
     - parameter year: (query) the year of the event (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func sfmSearchSetlistsGetSetlistsWithRequestBuilder(artistMbid: String? = nil, artistName: String? = nil, artistTmid: Int? = nil, cityId: String? = nil, cityName: String? = nil, countryCode: String? = nil, date: String? = nil, lastFm: Int? = nil, lastUpdated: String? = nil, p: Int? = nil, state: String? = nil, stateCode: String? = nil, tourName: String? = nil, venueId: String? = nil, venueName: String? = nil, year: String? = nil) -> RequestBuilder<Void> {
        let path = "/1.0/search/setlists"
        let URLString = DRLSetlistFM.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "artistMbid": artistMbid, 
                        "artistName": artistName, 
                        "artistTmid": artistTmid?.encodeToJSON(), 
                        "cityId": cityId, 
                        "cityName": cityName, 
                        "countryCode": countryCode, 
                        "date": date, 
                        "lastFm": lastFm?.encodeToJSON(), 
                        "lastUpdated": lastUpdated, 
                        "p": p?.encodeToJSON(), 
                        "state": state, 
                        "stateCode": stateCode, 
                        "tourName": tourName, 
                        "venueId": venueId, 
                        "venueName": venueName, 
                        "year": year
        ])


        let requestBuilder: RequestBuilder<Void>.Type = DRLSetlistFM.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
